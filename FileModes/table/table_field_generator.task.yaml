task:
    environment: native_shared.environment.yaml
    fieldgrid:
        children: []
        elements: {}
        values: {}
    streams:
    -   main:
        -   content: '# How it works currently

                # 1. User is in edit mode in a Data Table file

                # 2. User clicks on Generate Field Button, this task file (table_field_generator.task.yaml)
                will run

                # 3. The table_field_generator.task.yaml will do the following

                #     1. Create a folder {table_name} fields in the same directory
                as the Data Table file if it doesnt exist

                #     2. Generate all the fields according to the table''s column
                and store them in the folder ({table_name} fields)

                #         - TODO: but currently it doesnt work for foreign key and
                default value

                #     3. Create {table_dir}/{table_name} template folder if it doesn''t
                exist to store the template''s fields, tasks, and slates

                #     4. Create add new record btn (.field.yaml) if it doesnt exist

                #         - to be used in the table slate

                #     5. Create table row view (.slate.yaml) if it doesnt exist

                #     6. Create a task to view table records (.task.yaml) if it doesnt
                exist

                #         - this will reference the slate table row view created

                #         - to be used in the table slate

                #     7. create slate for table

                #         - TODO: yet to implement:

                #             - task to add a new record

                #             - interaction to enable right click (context menu) on
                record to edit n dlt it


                # -> to test: u can use the dummy table in https://c2.dev.dis.corpnet1.com/content/explore/Help/Samples/Slate%20Interactions/Slate%20Interaction%20Types/Dummy%20Data'
            loop-iterable: ''
            type: code
        -   content: "import yaml\nimport os\n \nif 'original_url' in parameters:\n\
                \    table_path = parameters['original_url']\n    # print(\"original_url\"\
                \ + table_path)\n    table_dir = os.path.dirname(table_path)\n   \
                \ # print(\"table_dir \" + table_dir)\n    if (file.exists(table_path)):\n\
                \        content = file.download(table_path)\n        # print(content)\n\
                \        table_content = yaml.safe_load(content)\n        # print(table_content)\n\
                \        # print(type(table_content))\n        table_name = table_content['table']['name'].lower()\n\
                \        table_columns = table_content['table']['columns']\n     \
                \   # print(table_name)\n        # print(table_columns)\n        if\
                \ (folder.get(f\"{table_dir}/{table_name} fields\")['exists']):\n\
                \            print(\"fields have been generated before\")\n      \
                \  else:\n            folder.create(f\"{table_dir}/{table_name} fields\"\
                )\n            # folder.create(f\"./{table_name} fields\")\n     \
                \       for col in table_columns:\n                if \"doc\" in col:\n\
                \                    desc = col['doc']\n                else:\n  \
                \                  desc = ''\n                # print(f\"name: {col['name']},\
                \ type: {col['type']}, doc: {desc}\")\n                readonly =\
                \ False\n                if col['name'] == 'date_created' or 'id'\
                \ in col['name'].lower():\n                    readonly = True\n \
                \               data = {\n                    \"field\": {\n     \
                \                   \"data\": {\n                            \"action\"\
                : None,\n                            \"options\": None,\n        \
                \                    \"params\": {\n                             \
                \   \"path\": None,\n                                \"query\": None\n\
                \                            },\n                            \"source\"\
                : None\n                        },\n                        \"default\"\
                : \"\",\n                        \"description\": desc,\n        \
                \                \"maximum\": '',\n                        \"minimum\"\
                : '',\n                        \"name\": col['name'],\n          \
                \              \"placeholder\": '',\n                        \"readonly\"\
                : readonly,\n                        \"required\": False,\n      \
                \                  \"spacing\": '3',\n                        \"step\"\
                : '',\n                        \"type\": col['type'].lower()\n   \
                \                 }\n                }\n                # print(data)\n\
                \                yaml_str = yaml.dump(data, default_style='\"', sort_keys=False)\n\
                \                file.put(f\"{table_dir}/{table_name} fields/{col['name']}.field.yaml\"\
                , yaml_str)\n                print(\"fields generated\")"
            loop-iterable: ''
            type: code
        -   content: "if (folder.get(f\"{table_dir}/{table_name} template\")['exists']):\n\
                \    print(f\"{table_name} template exists\")\nelse:\n    folder.create(f\"\
                {table_dir}/{table_name} template\")"
            loop-iterable: ''
            type: code
        -   content: "# create add new record btn\nif (folder.get(f\"{table_dir}/{table_name}\
                \ template/Add Button.field.yaml\")['exists']):\n    print(f\"Add\
                \ Button.field.yaml have been generated before in {table_dir}/{table_name}\
                \ template\")\nelse:\n    add_field_data = {\n        \"field\": {\n\
                \            \"data\": {\n                \"action\": None,\n    \
                \            \"options\": None,\n                \"params\": {\n \
                \                   \"path\": None,\n                    \"query\"\
                : None\n                },\n                \"source\": None\n   \
                \         },\n            \"default\": \"Add\",\n            \"description\"\
                : \"\",\n            \"maximum\": \"\",\n            \"minimum\":\
                \ \"\",\n            \"name\": \"\",\n            \"placeholder\"\
                : \"\",\n            \"spacing\": \"3\",\n            \"step\": \"\
                \",\n            \"type\": \"button\"\n        }\n    }\n    \n  \
                \  yaml_str = yaml.dump(add_field_data, sort_keys=False)\n    file.put(f\"\
                {table_dir}/{table_name} template/Add Button.field.yaml\", yaml_str)\n\
                \    print(\"add btn generated\")"
            loop-iterable: ''
            type: code
        -   content: "# Create slate table row view\nif (folder.get(f\"{table_dir}/{table_name}\
                \ template/{table_name} row.slate.yaml\")['exists']):\n    print(f\"\
                {table_name} row.slate.yaml have been generated before in {table_dir}/{table_name}\
                \ template\")\nelse:\n    files_info = folder.get(f\"{table_dir}/{table_name}\
                \ fields\")[\"files\"]\n    children = []\n    elements = {}\n   \
                \ \n    x, y = 0, 0\n    w, h = 4, 2\n    \n    for i, file_info in\
                \ enumerate(files_info):\n        element_id = f\"element_{i}\"\n\
                \        \n        children.append({\n            \"h\": h,\n    \
                \        \"id\": element_id,\n            \"w\": w,\n            \"\
                x\": x,\n            \"y\": y\n        })\n        \n        elements[element_id]\
                \ = {\n            \"spacing\": \"2\",\n            \"url\": f\"../dummy\
                \ fields/{file_info['name']}\"\n        }\n        \n    row_slate_data\
                \ = {\n        \"slate\": {\n            \"grid\": {\n           \
                \     \"children\": children,\n                \"elements\": elements\n\
                \            }\n        }\n    }\n    \n    yaml_str = yaml.dump(row_slate_data,\
                \ sort_keys=False)\n    file.put(f\"{table_dir}/{table_name} template/{table_name}\
                \ row.slate.yaml\", yaml_str)\n    print(\"row slate data generated\"\
                )"
            loop-iterable: ''
            type: code
        -   content: "# create a task to view table\nif (folder.get(f\"{table_dir}/{table_name}\
                \ template/{table_name}.task.yaml\")['exists']):\n    print(f\"{table_name}.task.yaml\
                \ have been generated before in {table_dir}/{table_name} template\"\
                )\nelse:\n    task_data = {\n        \"task\": {\n            \"environment\"\
                : \"native_shared.environment.yaml\",\n            \"fieldgrid\":\
                \ {\n                \"children\": [],\n                \"elements\"\
                : {},\n                \"values\": {}\n            },\n          \
                \  \"streams\": [\n                {\n                    \"main\"\
                : [\n                        {\n                            \"chart\"\
                : {\n                                \"advanced\": \"\",\n       \
                \                         \"legend\": \"Off\",\n                 \
                \               \"series-annos\": [\n                            \
                \        {\n                                        \"anno-col\":\
                \ \"\",\n                                        \"anno-col-back\"\
                : \"\",\n                                        \"anno-dt\": False,\n\
                \                                        \"anno-i\": \"\",\n     \
                \                                   \"anno-label\": \"\",\n      \
                \                                  \"anno-s\": \"\",\n           \
                \                             \"anno-tab\": \"0\",\n             \
                \                           \"anno-type\": \"box\",\n            \
                \                            \"anno-u\": \"\",\n                 \
                \                       \"anno-width\": \"\",\n                  \
                \                      \"anno-x\": \"\",\n                       \
                \                 \"anno-xm\": \"\",\n                           \
                \             \"anno-y\": \"\",\n                                \
                \        \"anno-ym\": \"\"\n                                    }\n\
                \                                ],\n                            \
                \    \"series-formats\": [\n                                    {\n\
                \                                        \"format-col\": \"\",\n \
                \                                       \"format-col-back\": \"\"\
                ,\n                                        \"format-dt\": False,\n\
                \                                        \"format-f\": False,\n  \
                \                                      \"format-lw\": \"\",\n    \
                \                                    \"format-nrx\": \"\",\n     \
                \                                   \"format-p\": False,\n       \
                \                                 \"format-pr\": \"\",\n         \
                \                               \"format-ps\": \"circle\",\n     \
                \                                   \"format-title\": \"\",\n    \
                \                                    \"format-ua\": \"\"\n       \
                \                             }\n                                ],\n\
                \                                \"series-groups\": [\n          \
                \                          {\n                                   \
                \     \"series-l\": \"\",\n                                      \
                \  \"series-s\": \"\",\n                                        \"\
                series-tab\": \"0\",\n                                        \"series-type\"\
                : \"Line\",\n                                        \"series-u\"\
                : \"\",\n                                        \"series-x\": \"\"\
                ,\n                                        \"series-y\": \"\",\n \
                \                                       \"series-ymax\": \"\",\n \
                \                                       \"series-ymin\": \"\",\n \
                \                                       \"series-z\": \"\"\n     \
                \                               }\n                              \
                \  ],\n                                \"subtitle\": \"\",\n     \
                \                           \"title\": \"\",\n                   \
                \             \"xaxis-type\": \"category\"\n                     \
                \       },\n                            \"loop-iterable\": \"\",\n\
                \                            \"output\": \"table\",\n            \
                \                \"table\": {\n                                \"\
                checkbox\": True,\n                                \"export\": False,\n\
                \                                \"filter\": False,\n            \
                \                    \"footer\": False,\n                        \
                \        \"multiselect-row\": False,\n                           \
                \     \"pagesize\": \"15\",\n                                \"pagination\"\
                : True,\n                                \"search\": True,\n     \
                \                           \"slate\": f\"./{table_name} row.slate.yaml\"\
                ,\n                                \"sortable\": True,\n         \
                \                       \"style\": \"default\",\n                \
                \                \"title\": \"\"\n                            },\n\
                \                            \"tabs\": [\n                       \
                \         {\n                                    \"content\": f\"\
                select * from {table_name}\",\n                                  \
                \  \"source\": \"{ Clarama['Services']['ClaramaSourceDB'] }\",\n \
                \                                   \"tab_id\": \"0\"\n          \
                \                      }\n                            ],\n       \
                \                     \"type\": \"data\"\n                       \
                \ }\n                    ]\n                }\n            ]\n   \
                \     }\n    }\n    \n    # print(task_data)\n    yaml_str = yaml.dump(task_data,\
                \ sort_keys=False)\n    file.put(f\"{table_dir}/{table_name} template/{table_name}.task.yaml\"\
                , yaml_str)\n    print(\"task_data generated\")"
            loop-iterable: ''
            type: code
        -   content: "# create slate for table\n# right click on record to edit n\
                \ dlt record\nif (folder.get(f\"{table_dir}/{table_name} template/{table_name}.slate.yaml\"\
                )['exists']):\n    print(f\"{table_name}.slate.yaml have been generated\
                \ before in {table_dir}/{table_name} template\")\nelse:\n    slate_data\
                \ = {\n        \"slate\": {\n            \"grid\": {\n           \
                \     \"children\": [\n                    {\n                   \
                \     \"h\": None,\n                        \"id\": \"element_0\"\
                ,\n                        \"w\": 3,\n                        \"x\"\
                : 4,\n                        \"y\": 0\n                    },\n \
                \                   {\n                        \"h\": 19,\n      \
                \                  \"id\": \"element_1\",\n                      \
                \  \"w\": 12,\n                        \"x\": 0,\n               \
                \         \"y\": 1\n                    }\n                ],\n  \
                \              \"elements\": {\n                    \"element_0\"\
                : {\n                        # \"links\": [\n                    \
                \    #     {\n                        #         \"element\": \"modal\"\
                ,\n                        #         \"params\": \"\",\n         \
                \               #         \"uid\": \"0\",\n                      \
                \  #         \"url\": \"./Add Record.task.yaml\"\n               \
                \         #     }\n                        # ],\n                \
                \        \"spacing\": \"1\",\n                        \"url\": \"\
                ./Add Button.field.yaml\"\n                    },\n              \
                \      \"element_1\": {\n                        # \"links\": [\n\
                \                        #     {\n                        #      \
                \   \"element\": \"modal\",\n                        #         \"\
                params\": \"\",\n                        #         \"uid\": \"0\"\
                ,\n                        #         \"url\": \"./Issues/Tasks/Add_Comments.task.yaml\"\
                \n                        #     }\n                        # ],\n\
                \                        \"params\": \"\",\n                     \
                \   \"refresh\": True,\n                        \"url\": f\"./{table_name}.task.yaml\"\
                \n                    }\n                }\n            }\n      \
                \  }\n    }\n    \n    yaml_str = yaml.dump(slate_data, sort_keys=False)\n\
                \    file.put(f\"{table_dir}/{table_name} template/{table_name}.slate.yaml\"\
                , yaml_str)\n    print(\"slate generated\")"
            loop-iterable: ''
            type: code
